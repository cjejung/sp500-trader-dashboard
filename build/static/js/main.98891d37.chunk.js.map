{"version":3,"sources":["app/AppRoutes.js","app/App.js","serviceWorker.js","index.js"],"names":["Dashboard","lazy","AppRoutes","fallback","exact","path","to","component","Component","App","state","this","onRouteChanged","className","prevProps","props","location","console","log","window","scrollTo","fullPageLayoutRoutes","i","length","pathname","setState","isFullPageLayout","document","querySelector","classList","add","remove","withRouter","Boolean","hostname","match","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAGMA,G,MAAYC,gBAAK,kBAAM,wDAkBdC,EAhBf,iLAEI,OACE,kBAAC,WAAD,CAAUC,SAAS,IACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAUC,GAAG,gBAEf,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,aAAaE,UAAYP,UARrD,GAA+BQ,aCCzBC,G,iNACJC,MAAQ,G,mFAENC,KAAKC,mB,+BAGL,OACE,6BACE,yBAAKC,UAAU,sBACb,kBAAC,EAAD,U,yCAMWC,GACbH,KAAKI,MAAMC,WAAaF,EAAUE,UACpCL,KAAKC,mB,uCAKPK,QAAQC,IAAI,iBACZC,OAAOC,SAAS,EAAG,GAEnB,IADA,IAAMC,EAAuB,CAAC,wBAAyB,wBAAyB,2BACtEC,EAAI,EAAGA,EAAID,EAAqBE,OAAQD,IAAM,CACtD,GAAIX,KAAKI,MAAMC,SAASQ,WAAaH,EAAqBC,GAAI,CAC5DX,KAAKc,SAAS,CACZC,kBAAkB,IAEpBC,SAASC,cAAc,uBAAuBC,UAAUC,IAAI,OAC5D,MAEAnB,KAAKc,SAAS,CACZC,kBAAkB,IAEpBC,SAASC,cAAc,uBAAuBC,UAAUE,OAAO,Y,GApCrDvB,cA2CHwB,cAAWvB,GCrCNwB,QACW,cAA7Bd,OAAOH,SAASkB,UAEe,UAA7Bf,OAAOH,SAASkB,UAEhBf,OAAOH,SAASkB,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAS,KACtB,kBAAC,EAAD,OAEFX,SAASY,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.98891d37.chunk.js","sourcesContent":["import React, { Component, Suspense, lazy } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nconst Dashboard = lazy(() => import('./dashboard/Dashboard'))\n\nexport class AppRoutes extends Component {\n  render() {\n    return (\n      <Suspense fallback=''>\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to=\"/dashboard\"></Redirect>\n          </Route>\n          <Route exact path=\"/dashboard\" component={ Dashboard } />\n\n        </Switch>\n      </Suspense>\n    )\n  }\n}\n\nexport default AppRoutes\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './App.scss';\nimport AppRoutes from './AppRoutes';\nimport 'font-awesome/css/font-awesome.min.css';\n\nclass App extends Component {\n  state = {}\n  componentDidMount() {\n    this.onRouteChanged();\n  }\n  render () {\n    return (\n      <div>\n        <div className=\"az-content-wrapper\">\n          <AppRoutes/>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      this.onRouteChanged();\n    }\n  }\n\n  onRouteChanged() {\n    console.log(\"ROUTE CHANGED\");\n    window.scrollTo(0, 0);\n    const fullPageLayoutRoutes = ['/general-pages/signin', '/general-pages/signup', '/general-pages/page-404'];\n    for ( let i = 0; i < fullPageLayoutRoutes.length; i++ ) {\n      if (this.props.location.pathname === fullPageLayoutRoutes[i]) {\n        this.setState({\n          isFullPageLayout: true\n        })\n        document.querySelector('.az-content-wrapper').classList.add('p-0');\n        break;\n      } else {\n        this.setState({\n          isFullPageLayout: false\n        })\n        document.querySelector('.az-content-wrapper').classList.remove('p-0');\n      }\n    }\n  }\n\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <BrowserRouter basename=\"/\">\n    <App />\n  </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}